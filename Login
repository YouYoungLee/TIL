1. Session
HttpSession session 으로 Session 생성
서버에 저장 OR DB에 저장
헤더값에 Session을 같이 보내면 서버에 저장된 Session으로 사용자 확인


2. JWT
1) header
토큰의 종류와 해싱 알고리즘의 정보 이렇게 2가지 정보가 담겨 있습니다.
typ: 토큰의 타입을 지정합니다. 바로 JWT를 말하는 것입니다.
alg: 해싱 알고리즘을 지정합니다. 보통 HMAC-SHA256 혹은 RSA 가 사용되며, 이 알고리즘은 토큰을 검증 할 때 사용되는 signature 부분에서 사용됩니다.

2) payload
토큰의 내용물이 인코딩된 부분
즉, 토큰에 담을 정보가 들어 있는 부분입니다.
여기에 담는 정보의 한 ‘조각’ 을 클레임(Claim) 이라고 부르고, 이는 Json(Key/Value) 형태의 한 쌍으로 이뤄져있습니다. 토큰에는 여러개의 클레임들을 넣을 수 있습니다. (세부 클레임 사항은 검색을 통해 보는 것이 효율적 입니다.)

3) Signature
토큰을 인코딩하거나 유효성 검증을 할 때 사용하는 고유한 암호화 코드입니다.
헤더(Header)와 내용(Payload)의 값을 각각 BASE64로 인코딩하고, 인코딩한 값을 비밀키를 이용해 헤더에서 정의한 알고리즘으로 해싱을 하고, 이 값을 다시 BASE64로 인코딩하여 생성한다.
secret key로 사용되는 일련의 문자열이라고 이해하면 쉽습니다.


세션 방식
장점:

서버 측 상태 관리:

세션 방식은 서버 측에서 세션 정보를 저장하므로, 클라이언트가 세션 토큰을 가지고 있을 때 서버는 해당 세션의 상태를 관리할 수 있습니다. 이로 인해 인증과 권한 관리를 서버에서 보다 직접적으로 수행할 수 있어 보안상 유리할 수 있습니다.
무효화 용이:

세션을 서버 측에서 관리하므로, 로그아웃 시 또는 세션 만료 시 세션 정보를 쉽게 무효화할 수 있습니다. 서버에서 세션을 삭제하거나 만료시키면 클라이언트가 즉시 로그아웃됩니다.
단점:

서버 자원 소모:

모든 세션 정보를 서버 측에서 저장하고 관리해야 하므로, 서버의 메모리나 데이터베이스 자원을 소모합니다. 많은 사용자가 동시에 접속하는 경우, 서버 자원이 큰 부담을 받을 수 있습니다.
확장성 문제:

서버를 여러 대 사용하는 분산 환경에서는 세션 정보를 공유하고 동기화하는 것이 복잡할 수 있습니다. 이를 해결하기 위해 중앙 집중식 세션 저장소를 도입해야 할 수도 있습니다.
JWT 방식
장점:

클라이언트 측 저장:

JWT는 클라이언트 측에서 저장되며, 토큰에 모든 필요한 정보를 포함하므로 서버는 세션 상태를 저장할 필요가 없습니다. 이로 인해 서버 자원을 절약할 수 있으며, 특히 분산 환경에서 확장성이 용이합니다.
무상태(Stateless) 인증:

JWT는 무상태(stateless) 방식으로, 서버는 클라이언트의 인증 정보를 관리할 필요가 없습니다. 토큰 자체에 사용자 정보를 포함하고 있어 서버는 토큰을 검증만 하면 되므로, 서버의 상태를 유지할 필요가 없습니다.
단점:

무효화 어려움:

JWT는 서버에서 상태를 유지하지 않기 때문에, 토큰을 무효화하는 것이 어렵습니다. 로그아웃하거나 권한을 변경할 때, 클라이언트가 새 토큰을 얻기 전까지 기존 토큰이 유효하게 남아 있을 수 있습니다.
토큰 크기 및 보안:

JWT는 클라이언트에 정보를 포함하고 있기 때문에, 토큰이 크기가 커질 수 있습니다. 또한, 클라이언트 측에 저장된 토큰이 탈취되면, 공격자가 해당 토큰을 이용해 인증된 사용자로 가장할 수 있습니다. 이를 방지하기 위해 HTTPS를 사용하고, 토큰의 암호화와 서명을 통해 보안을 강화해야 합니다.
