# 테스트
JAVA에서 고정길이변수 받는법
1. SELECT할 때 오라클 PAD 이용
2. JAVA에서 set메서드로 받을 때 반복문 또는 java11이상 repeat 사용
3. oracle에 넣을 때(insert) PAD 이용

# JAVA 명명 규칙
1. 클래스 이름(Class Names):
  첫 글자는 대문자로 시작합니다.
  Camel Case를 사용하여 각 단어의 첫 글자를 대문자로 적습니다.
  public class MyClass {
      // 클래스 내용
  }
2. 인터페이스 이름(Interface Names):
  클래스와 동일하게 첫 글자는 대문자, Camel Case 사용
  public interface MyInterface {
      // 인터페이스 내용
  }
3. 메서드 이름(Method Names):
  소문자로 시작하며, Camel Case를 사용
  public void myMethod() {
      // 메서드 내용
  }
4. 변수 이름(Variable Names):
  소문자로 시작하며, Camel Case를 사용
  int myVariable = 10;
5. 상수 이름(Constant Names):
  대문자로 작성하며, 단어 사이를 언더스코어(_)로 구분
  public static final int MAX_VALUE = 100;
6. 패키지 이름(Package Names):
  모두 소문자로 작성되며, 필요시 점으로 구분
  package com.example.myproject;
7.Camel Case (낙타 표기법):
  첫 단어는 소문자로 시작하며, 이후 각 단어의 첫 글자는 대문자로 작성합니다.
  int myVariableName;

mapper.xml 쿼리문에서 상수값을 가져오고 싶다면 mybatis config properties에 작성하여 가져올 수 있음
ex)  <properties>
        <property name="G_TLF_TERM_TOTAL_M" value="JV_TLF_TERM_TOTAL"/>
        <property name="G_TLF_TERM_TOTAL_T" value="JV_TLF_TERM_TOTAL_TEMP"/>
        <property name="G_TLF_MOTO_TOTAL_BATCH_T" value="JV_TLF_MOTO_TOTAL_BATCH"/>
        <property name="G_TLF_MOTO_TOTAL_M" value="JV_TLF_MOTO_TOTAL"/>
        <property name="G_TLF_COTO_TOTAL_M" value="JV_TLF_COTO_TOTAL"/>
        <property name="G_TLF_BOTO_TOTAL_M" value="JV_TLF_BOTO_TOTAL"/>
        <property name="G_TLF_TOTO_TOTAL_M" value="JV_TLF_TOTO_TOTAL"/>
        <property name="G_TLF_IOTO_TOTAL_M" value="JV_TLF_IOTO_TOTAL"/>
        <property name="G_TLF_ETC_TOTAL_M" value="JV_TLF_ETC_TOTAL"/>
      </properties>

       ${G_TLF_TERM_TOTAL_T}


AOP는 Aspect Oriented Programming의 약자로 관점 지향 프로그래밍이라고 불린다. 관점 지향은 쉽게 말해 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다. 여기서 모듈화란 어떤 공통된 로직이나 기능을 하나의 단위로 묶는 것을 말한다. 
 
예로들어 핵심적인 관점은 결국 우리가 적용하고자 하는 핵심 비즈니스 로직이 된다. 또한 부가적인 관점은 핵심 로직을 실행하기 위해서 행해지는 데이터베이스 연결, 로깅, 파일 입출력 등을 예로 들 수 있다.
 
AOP에서 각 관점을 기준으로 로직을 모듈화한다는 것은 코드들을 부분적으로 나누어서 모듈화하겠다는 의미다. 이때, 소스 코드상에서 다른 부분에 계속 반복해서 쓰는 코드들을 발견할 수 있는 데 이것을 흩어진 관심사 (Crosscutting Concerns)라 부른다. 
위와 같이 흩어진 관심사를 Aspect로 모듈화하고 핵심적인 비즈니스 로직에서 분리하여 재사용하겠다는 것이 AOP의 취지다.

JOB - STEP
STEP 내부에는 tasklet 혹은 ItemReader ItemProcessor ItemWriter이 존재한다.

ItemReader에서 jobExecution 가져오기
JobExecution jobExecution = StepSynchronizationManager.getContext().getStepExecution().getJobExecution()
ExecutionContext jobExecutionContext = jobExecution.getExecutionContext();
JobStatDto js = (JobStatDto) jobExecutionContext.get("js");
